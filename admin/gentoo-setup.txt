Здесь лог настройки и конкретных действий для Дженты
То, что описано в доках, здесь упоминаться не будет - если это не потребовалось делать как-то иначе \ повторять\проводить любые танцы с бубном

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Офигеть, можно оказывается на /boot поставить параметр noauto в fstab, тогда всё нормально будет грузиться, но после загрузки /boot будет не примонтирован
Ы

framebuffer в дженте - ваще пыщ-пыщ - появился после ядра с конфигами из ксорг\нвидиа

И исчез после того, как выключил в Stage Drivers свободный драйвер для nvidia (который nouveau)
А его выключил для решения вот этой хрени - кстати, хорошо детективное расследование описано
http://forums.gentoo.org/viewtopic-t-865641-highlight-nouveau.html
У меня по lspci -k используемый драйвер светился nouveau, и при попытке сделать modprobe nvidia он валился с ошибкой
error inserting nvidia 3.0.6 no such device

FIXME - Разобраться, как теперь framebuffer вернуть - желательно, uvesa

Чтобы завести X с проприетарными дровами от nvidia, надо было сгенерить nvidia-xconfig, дописать туда секцию с glx, как в guide описано
FIXME - Но ещё надо как-то избавиться от загрузки dri\dri2, которые вбиты по умолчанию и в конфигах их нет
У меня их сейчас заменяет glx

Так же печалька обнаружилась по такой схеме:
откатываемся на старые иксы (через /etc/portage/package.accept_keywords)
убеждаемся, что проблема не в версиях, и надо вернуть иксы назад
запускаем 

emerge --update --deep --newuse --with-bdeps=y xorg-server

И он таки _не_ пересобирает свои зависимости, в данном случае драйверы остались старыми
Мораль истории - обновляться после неудачных откатов надо так:
# emerge --update --deep --newuse xorg-server
# emerge --depclean
# revdep-rebuild

Далее настройка, чтобы startx запускала кеды
В гиде приводится такое:
echo XSESSION="KDE-4" > /etc/env.d/90xsession
(а возможные значения сессий в /etc/X11/Sessions)
Думал сначала файл такой должен быть, потом допёрло, что его создаём сейчас

Для локализации - консоль вроде УТФ-цирована, но непонятно, как раскладку там переключать
Маны надо починить - сейчас некоторые отображаются убито

Для юзера команда по добавлению в группы
usermod -a -G gr1,gr2,gr3 ton

флэшка по-прежнему не открывается сама, печаль
Сетку с жёстким адресом настроить - опять, куда притулить выполнение скрипта общесистемного
Шрифтов накачать нормальных разных - gvim блин не открывается
Шрифты никакие ни при чём - gvim надо было нормально собрать, с USE=gtk
Другого гуя в основном портаже нету
TODO - попробовать из оверлея gvim с кутешной мордой

Не проверено
#Правим для консольных дел:
#(непонятно, нужно ли)
#/etc/conf.d/consolefont
#unicodemap="ruscii"

#Про автомонтирование флешек в KDE
#dbus во флаги надо было добавлять, дружок
#http://ru.gentoo-wiki.com/wiki/HOWTO_%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5_USB-flash
# чё-то не помогло мне сие
Автомонтирование флешек - там какая-то больная и долгоиграющая тема

Можно конечно ещё раз emerge world сделать, фигле
Вминание! Полное обновление системы выглядит так:
emerge --deep --update --with-bdeps=y --newuse world
emerge --depclean
revdep-rebuild

Настройка печати - для HP LaserJet 1020 - танцы с бубном!

Сначала ставим cups
emerge cups
/etc/init.d/cupsd start
rc-update add cupsd default

Потом танцы с бубном!
http://www.gentoo-wiki.info/HP_LaserJet_1020
Во-первых, нужен проприетарный драйвер foo2zjs от HP
Во-вторых, версия из портежа не работает
В-третьих, этим принтерам нужно загружать программку к ним в 
железную память каждый раз, когда их включаешь - для этого используется hotplug
hotplug конфликтует с udev-ными правилами для принтера! поэтому, чтобы его поставить,
надо сделать :
mv /etc/udev/rules.d/70-printers.rules ~/куда-то
тогда hotplug можно будет ставить! и теперь:

wget -O foo2zjs.tar.gz http://foo2zjs.rkkda.com/foo2zjs.tar.gz
tar zxf foo2zjs.tar.gz
cd foo2zjs
make
./getweb 1020
su
make install
make install-hotplug
^^^
При второй установке этот 70-printers.rules оказался уже тут:
/lib/udev/rules.d/70-printers.rules

потом перезапустить демона cups
/etc/init.d/cupsd restart

И после этого всё запечатало

Настройка гадского KDE, чтобы выполнял системные настройки, выключение, втык флешек и тыды
Сначала собираем с новым флагом policykit - мол обязательный для такого
Нихрена не помогло - в kde-стаффе такого флага вообще нет
Читаем мега-тред 
http://forums.gentoo.org/viewtopic-t-858965.html

По нынешнему состоянию - так и не работает, зараза

Здесь ставим clock="local"
/etc/conf.d/hwclock
(При обновлении /etc настройки сбились)

Настройки переключения клавы нынче лежат в 
/etc/X11/xinit/xinitrc.d/99-xkeymap
(сам его создал)
Неплохо бы его перенести в куда-нить поуниверсальней

Сканер зараза запускается только под рутом - под юзером ошибка с Device is busy


#-----------------------------------------

round 2!!!

Gentoo на amd64

Базовая установка

handbook по установке + берём последнее ядро, собранное под Слакой, т.к. из-под genkernel ядро не захотело бутиться из grub2
Выбираем профиль desktop + kde
Ядро вручную устанавливаем на первый раздел, который при установке не затрагивался и создан был в Слаке
handbook локализация + utf-8

emerge vim, аррргх

Значение всякого из  /etc/portage/make.conf 
(включены те, что добавились после хендбуков)

CFLAGS="-march=amdfam10 -mtune=amdfam10 -O2 -pipe -fomit-frame-pointer"
USE="mmx sse sse2 bash-completion cdinstall cups djvu ffmpeg foomaticdb gimp gphoto2 handbook libedit mhash mplayer multilib nls python scanner smp source ssl v4l vim-syntax zlib zsh-completion -gnome libkms truetype type1"
LINGUAS="en ru"
VIDEO_CARDS="dummy fbdev mga r128 radeon v4l vesa vmware"

Хендбук по X + gentoo-wiki про radeon
В итоге Иксы с открытыми дровами на ATI Turks [Radeon HD 6570]
В новом ядре на разогрев драйвера уходит заметно больше времени, чем под Слакой + xfce4

Делаем процедуру облагораживания мира (полный обнов, depclean, revdep-rebuild)

Размаскируем тестинг на razorqt-meta
emerge razorqt-meta

Нет нормального запускателя сесии! Тырим данный файл из Слаковского билда и ставим сюда
cp $SLACKROOT/etc/X11/xinit/xinit.razorqt /etx/X11/Sessions/razorqt

Куда-нибудь в /etc/env.d пишем
XSESSION="razorqt"
EDITOR="vim"

emerge pmount
emerge sudo
emerge layman

Добавляем юзера
useradd -m -G users,disk,lp,wheel,floppy,mail,audio,video,cdrom,plugdev -s /bin/bash ton

Делаем нормальные шрифты

sudo emerge -n terminus-font intlfonts freefonts cronyx-fonts corefonts kbd alee-fonts ttf-bitstream-vera unifont dejavu
И в /etc/portage/make.conf в USE флаги добавляем truetype type1, если их не было

Пересобираем всё - шрифты ваще шикарные, лучше чем где угодно

# --------------------------------------------

# облагораживаем хозяйство

Дописываем /etc/fstab всеми разделами с данными, какие есть
Дописываем в /boot/grub пункты меню - одно с устойчивой gentoo, второе для экспериментов

emerge xfce4-meta

В конечном итоге перешли штатно на xfce4
В razor-qt не удалось починить все глюки + заметные тормоза на qt-шных окнах

emerge eix

Во время одного из апдейтов мира делаем
merge --unmerge sys-apps/module-init-tools


#-----------------------------------------

round 3 !!!

Установка Gentoo amd64 на некробук Toshiba Portege Z930

Образ minimal install пишем на флешку

Дальше веселье с wifi-карточкой
Хочу всё качать через wifi
Адаптер там - Intel Centrino N2230
Для него надо доставить firmware
В моём случае это iwlwifi-2030-ucode-18.168.6.1
Пишем на вторую флешку, записываем в ФС загрузочной флешки, затем

mv iwlwifi-2030-ucode-18.168.6.1 /lib/firmware
ln -s iwlwifi-2030-ucode-18.168.6.1/iwlwifi-2030-6.ucode /lib/firmware
^^^
нужно, чтобы в директории он видел файл ucode непосредственно

modprode -r iwlwifi
modprode iwlwifi

wlan0 поднялся

iwlist wlan0 scan >& wifi-nets.txt
^^^
определяем доступные wifi-сети
их имена будут с ключом "ESSID"

дальше нужно настроить доступ к сети с шифрованием WPA2 через wpa_supplicant
/etc/conf.d/net
^^^
общие настройки, пишем туда:
modules="wpa_supplicant"
wpa_supplicant_wlan0="-Dwext"

modules="wpa_supplicant"
^^^
показываем, что используем wpa_supplicant по умолчанию (супротив дефолтных wireless-tools)

wpa_supplicant_wlan0="-Dwext"
^^^
указываем явно драйвер, чтобы не угадывал

/etc/wpa_supplicant/wpa_supplicant.conf
^^^
теперь настройки для самого wpa_supplicant

ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
ap_scan=1

network={
  ssid="net-name"
  psk="very secret passphrase"
  priority=5
}

wpa_supplicant -c/etc/wpa_supplicant/wpa_supplicant.conf -B -iwlan0
^^^
ввод интерфейса в сеть через wpa_supplicant ; -B - бэкграунд

будет также нелишне сделать ifconfig eth0 down, чтобы нерабочий интерфейс не мешался
ip addr del <ADDR> dev <INTERFACE>
^^^
удалить адрес с интерфейса
тоже может пригодиться

********************

Размечаем диск
нужно юзать размечалку, которая умеет в gpt

!!! Внимание !!!
Уродец parted вносит изменения в таблицу разделов сразу, а не набирает транзакцию и коммитит, как fdisk \ gdisk
И интерфейс у него в худших традициях гнутых
размечаем gdisk-ом, которого ныне нет в Джентушных доках

Создаём UEFI раздел
Доки советуют выбирать для него размер, сравнимый с /boot (порядка 500Mb); 
если юзаем grub, он вполне может быть небольшим (100-200 Mb), но на всякий пожарный следует зарезервировать побольше

создаём разделы:
512 Mb - Linux Partition - под бут
512 Mb - EFI System
12 Gb  - Linux swap - (вдвое больше размера оперативы)
30 Gb  - Lunux Partition - под /
08 Gb  - Lunux Partition - под /var
20 Gb  - Linux Partition - резервный раздел под юзерское осенезависимое пространство (когда внешнего жирного винта нет)

создаём файловые системы:

Для UEFI доки предписывают только FAT32
Для корня был бы неплох btrfs, но нету mkfs.btrfs в минимальном установочном образе
Для юзерских данных - jfs как многообещающую
reiserfs для /var (то есть компиляции всего из портежа) посмотрим, как себя зарекомендует

mkfs.ext4 /dev/sda1
mkfs.vfat /dev/sda2
mkswap /dev/sda3
swapon /dev/sda3
mkfs.jfs /dev/sda4
mkreiserfs /dev/sda5
mkfs.jfs /dev/sda6

mkdir -p /mnt/gentoo/var
mkdir -p /mnt/gentoo/boot

mount /dev/sda4 /mnt/gentoo
mount /dev/sda5 /mnt/gentoo/var
mount /dev/sda1 /mnt/gentoo/boot

********************
Действия, повторяющие описание из стандартных доков

Обновляем дату

date 031123342013
^^^
месяц, день, час, минута, год - формат по умолчанию

Записываем stage3-tarball в /root (скачанный заранее с хостовой машины и на флешке принесённый)

cd /mnt/gentoo
tar xvjpf /root/stage3-*.tar.bz2

Пишем в etc/portage/make.conf

CFLAGS="-O2 -pipe -fomit-frame-pointer -march=native"
MAKEOPTS="-j4"
GENTOO_MIRRORS="http://gentoo.bloodhost.ru/ http://gentoo.localhost.net.ar/ http://ftp.dei.uc.pt/pub/linux/gentoo/ "
SYNC="rsync://rsync1.ru.gentoo.org/gentoo-portage"
USE="mmx sse sse2 bash-completion cdinstall cups djvu ffmpeg foomaticdb gimp gphoto2 handbook libedit mhash mplayer multilib nls python scanner smp source ssl v4l vim-syntax zlib zsh-completion -gnome truetype type1 oss -alsa"
LINGUAS="en ru"

Сохраняем настройки DNS
cp -L /etc/resolv.conf /mnt/gentoo/etc/
^^^
-L чтобы копировать не ссылку

mount -t proc none /mnt/gentoo/proc
mount --rbind /sys /mnt/gentoo/sys
mount --rbind /dev /mnt/gentoo/dev
^^^
запиливаем ядерные файловые системы в новое окружение
rbind - для того, чтобы маунтились все суб-системы внутри директорий
забавное использование - получается, mount-ом можно сказать, что произвольная директория (не только файл) теперь отражается и в другой директории тоже 

chroot /mnt/gentoo /bin/bash
source /etc/profile
export PS1="(chroot) $PS1"
^^^
чрутимся в систему, развёрнутую из stage3

mkdir /usr/portage
emerge-webrsync
emerge --sync
emerge --oneshot -u portage
^^^
получаем последний portage

eselect profile list
eselect profile set 3
^^^
смотрим доступные профили (совокупности USE-флагов) и выбираем default/linux/amd64/13.0/desktop

cp /usr/share/zoneinfo/Europe/Moscow /etc/localtime
echo "Europe/Moscow" > /etc/timezone
^^^
настраиваем правильную тайм-зону

********************

Собираем ядро - 1

воспользуемся genkernel-ом, чтобы получить заведомо рабочее ядро
(затем оттюнингованное соберём руками)

emerge gentoo-sources
^^^
с подготовленными USE-флагами это зацепит 70 пакетов!
emerge genkernel
cd /usr/src/linux
genkernel --menuconfig all
^^^
запуск genkernel, но с предварительными правками конфига по дефолту
добавляем только поддержку jfs и btrfs в самом ядре вместо модулей

ls /boot/kernel* /boot/initramfs*
^^^
записываем названия ядра и initramfs для загрузчика
kernel-genkernel-x86_64-3.7.10-gentoo
initramfs-genkernel-x86_64-3.7.10-gentoo

********************

Системная конфигурация

пишем /etc/fstab

/etc/conf.d/hostname
^^^
выставляем имя хоста

копируем etc/conf.d/net из окружения флешки в чрут
дописываем туда:
#config_eth0="dhcp"
^^^
чтобы eth0 был наготове, когда понадобится воткнуть провод

cd /etc/init.d
ln -s net.lo net.eth0
ln -s net.lo net.wlan0
rc-update add net.eth0 default
rc-update add net.wlan0 default
^^^
добавляем автозагрузку сетевых интерфейсов

кладём из окружения флешки /lib/firmware/iwl* в /mnt/gentoo/lib/firmware
emerge wpa_supplicant
^^^
ставим wpa_supplicant внутрь /mnt/gentoo
копируем конфиг для него etc/wpa_supplicant/wpa_supplicant.conf

